"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.mergeDeep = mergeDeep;exports.mergeDefaultParameter = mergeDefaultParameter;exports.deepMergeParameter = deepMergeParameter;exports.shallowMergeNonExistingPropertyOnly = shallowMergeNonExistingPropertyOnly;exports.mergeOwnNestedProperty = exports.mergeNonexistentProperties = void 0;var _assert = _interopRequireDefault(require("assert"));
var _deepmerge = _interopRequireDefault(require("deepmerge"));
var _mergeAnything = require("merge-anything");
var _removeUndefined = require("./removeUndefined.js");
const hasOwnProperty = Object.prototype.hasOwnProperty;
const isArray = Array.isArray;
const isObject = obj => obj && typeof obj === 'object';








function mergeDeep(...objects) {
  return objects.reduce((prev, obj) => {
    Object.keys(obj).forEach(key => {
      const pVal = prev[key];
      const oVal = obj[key];

      if (isArray(pVal) && isArray(oVal)) {
        prev[key] = pVal.concat(...oVal);
      } else if (isObject(pVal) && isObject(oVal)) {
        prev[key] = mergeDeep(pVal, oVal);
      } else {
        prev[key] = oVal;
      }
    });
    return prev;
  }, {});
}


function mergeDefaultParameter({ defaultArg, passedArg }) {
  let loopLength = Math.max(defaultArg.length, passedArg.length);
  for (let index = 0; index < loopLength; index++) {
    if (typeof passedArg[index] == 'object' && typeof defaultArg[index] == 'object') {var _passedArg$index;
      passedArg[index] = Object.assign(defaultArg[index], (_passedArg$index = passedArg[index], (0, _removeUndefined.removeUndefinedFromObject)(_passedArg$index)));
    } else if (!passedArg[index]) {
      passedArg[index] = defaultArg[index];
    } else {
      passedArg[index] = passedArg[index];
    }
  }
  return passedArg;
}


const mergeNonexistentProperties = (targetObject, defaultValue) => {

  let propertyKey = [...Object.getOwnPropertySymbols(defaultValue), ...Object.getOwnPropertyNames(defaultValue)];
  let propertyDescriptor = Object.getOwnPropertyDescriptors(defaultValue);
  propertyKey.forEach(key => {
    if (!hasOwnProperty.call(targetObject, key)) Object.defineProperty(targetObject, key, propertyDescriptor[key]);
  });
};exports.mergeNonexistentProperties = mergeNonexistentProperties;


const mergeOwnNestedProperty = ({ target, propertyPath, value }) => {
  (0, _assert.default)(propertyPath, 'â€¢ `propertyPath` must be passed.');

  if (!Array.isArray(propertyPath)) propertyPath = [propertyPath];
  let targetProperty = target;
  for (let index in propertyPath) {
    if (!hasOwnProperty.call(targetProperty, propertyPath[index])) {

      Object.defineProperty(targetProperty, propertyPath[index], { enumerable: true, writable: true, value: {} });
    }
    targetProperty = targetProperty[propertyPath[index]];
  }
  Object.assign(targetProperty, value);
  return target;
};exports.mergeOwnNestedProperty = mergeOwnNestedProperty;


const concatinateArrayMerge = (defaultList, overridingList, options) => {
  const destination = defaultList.slice();
  destination.concat(overridingList);
  return destination;
};

const combineArrayMerge = (defaultList, overridingList, options) => {
  const destination = defaultList.slice();
  overridingList.forEach((item, index) => {
    if (typeof destination[index] === 'undefined') {
      destination[index] = options.cloneUnlessOtherwiseSpecified(item, options);
    } else if (options.isMergeableObject(item)) {




      destination[index] = (0, _mergeAnything.merge)(
      { extensions: [_mergeAnything.concatArrays] },
      defaultList[index],
      item);

    } else if (defaultList.indexOf(item) === -1) {
      destination.push(item);
    }
  });
  return destination;
};








const deepMergeArgumentArray = ({ overridingArray, defaultArray }) => {

  return (0, _deepmerge.default)(defaultArray, overridingArray, { arrayMerge: combineArrayMerge });
};






function deepMergeParameter(targetArgArray, ...defaultArgumentListArray) {
  for (let defaultArray of defaultArgumentListArray) targetArgArray = deepMergeArgumentArray({ overridingArray: targetArgArray, defaultArray });
  return targetArgArray;
}


function shallowMergeNonExistingPropertyOnly({ targetObject, baseObject }) {
  return Object.keys(baseObject).reduce(function (accumulator, key) {
    if (!accumulator[key]) accumulator[key] = baseObject[key];
    return accumulator;
  }, targetObject);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,